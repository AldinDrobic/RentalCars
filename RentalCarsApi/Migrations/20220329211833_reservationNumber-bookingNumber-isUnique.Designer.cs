// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentalCarsApi.Data;

#nullable disable

namespace RentalCarsApi.Migrations
{
    [DbContext(typeof(RentalCarsDbContext))]
    [Migration("20220329211833_reservationNumber-bookingNumber-isUnique")]
    partial class reservationNumberbookingNumberisUnique
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence<int>("BookingNumber")
                .StartsAt(1000L);

            modelBuilder.HasSequence<int>("ReservationNumber")
                .StartsAt(1000L);

            modelBuilder.Entity("RentalCarsApi.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<int>("Milage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsRented = true,
                            Milage = 156000,
                            Name = "Opel Astra"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsRented = true,
                            Milage = 230526,
                            Name = "Volvo V70"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsRented = false,
                            Milage = 122000,
                            Name = "Volvo V90"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsRented = true,
                            Milage = 172340,
                            Name = "Volvo XC90"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            IsRented = true,
                            Milage = 154794,
                            Name = "Volvo XC60"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            IsRented = true,
                            Milage = 254786,
                            Name = "Volvo XC40"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            IsRented = false,
                            Milage = 204413,
                            Name = "Chrysler Pacifica"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            IsRented = true,
                            Milage = 11445,
                            Name = "Ferrari Enzo"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            IsRented = false,
                            Milage = 10224,
                            Name = "Lamborghini Aventador"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            IsRented = false,
                            Milage = 12000,
                            Name = "Opel Meriva"
                        });
                });

            modelBuilder.Entity("RentalCarsApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Compact"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Premium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Minivan"
                        });
                });

            modelBuilder.Entity("RentalCarsApi.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BaseDayRental")
                        .HasColumnType("float");

                    b.Property<double>("KilometerPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseDayRental = 10.0,
                            KilometerPrice = 1.0,
                            Name = "Standard"
                        });
                });

            modelBuilder.Entity("RentalCarsApi.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR ReservationNumber");

                    b.Property<string>("TimeDateRental")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeDateReturn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ReservationNumber")
                        .IsUnique();

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            CustomerBirth = "1984-07-04-1111",
                            ReservationNumber = 1000,
                            TimeDateRental = "220401",
                            TimeDateReturn = "220401"
                        },
                        new
                        {
                            Id = 2,
                            CarId = 4,
                            CustomerBirth = "1974-08-04-1112",
                            ReservationNumber = 1001,
                            TimeDateRental = "220402",
                            TimeDateReturn = "220402"
                        },
                        new
                        {
                            Id = 3,
                            CarId = 6,
                            CustomerBirth = "1964-09-04-1113",
                            ReservationNumber = 1002,
                            TimeDateRental = "220403",
                            TimeDateReturn = "220403"
                        });
                });

            modelBuilder.Entity("RentalCarsApi.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR BookingNumber");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndCarMilage")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfKilometers")
                        .HasColumnType("int");

                    b.Property<double?>("RentalPrice")
                        .HasColumnType("float");

                    b.Property<int>("StartCarMilage")
                        .HasColumnType("int");

                    b.Property<string>("TimeDateRental")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeDateReturn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalRentalDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingNumber")
                        .IsUnique();

                    b.HasIndex("CarId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingNumber = 1000,
                            CarId = 2,
                            CustomerBirth = "1984-07-04-1111",
                            StartCarMilage = 0,
                            TimeDateRental = "220401",
                            TimeDateReturn = "220401",
                            TotalRentalDays = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingNumber = 1001,
                            CarId = 5,
                            CustomerBirth = "1974-07-04-1112",
                            StartCarMilage = 0,
                            TimeDateRental = "220402",
                            TimeDateReturn = "220402",
                            TotalRentalDays = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingNumber = 1002,
                            CarId = 8,
                            CustomerBirth = "1964-07-04-1113",
                            StartCarMilage = 0,
                            TimeDateRental = "220403",
                            TimeDateReturn = "220403",
                            TotalRentalDays = 1
                        });
                });

            modelBuilder.Entity("RentalCarsApi.Models.Car", b =>
                {
                    b.HasOne("RentalCarsApi.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RentalCarsApi.Models.Reservation", b =>
                {
                    b.HasOne("RentalCarsApi.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("RentalCarsApi.Rental", b =>
                {
                    b.HasOne("RentalCarsApi.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });
#pragma warning restore 612, 618
        }
    }
}
